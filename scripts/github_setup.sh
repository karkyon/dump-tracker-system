#!/bin/bash

# ダンプトラッカープロジェクト統合GitHub登録スクリプト
# 既存の充実したプロジェクト構造をGitHubに登録

set -e

# 設定（必ず変更してください）
GITHUB_USERNAME="karkyon"
REPO_NAME="dump-tracker-system"

# カラー出力
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
step() { echo -e "\n${PURPLE}=== $1 ===${NC}"; }

echo "=================================================="
echo "🚛 ダンプトラッカーシステム GitHub登録"
echo "=================================================="

# 設定確認
if [ "$GITHUB_USERNAME" = "あなたのGitHubユーザー名" ]; then
    error "GITHUB_USERNAMEを設定してください（スクリプト内で変更）"
    exit 1
fi

log "GitHubユーザー名: $GITHUB_USERNAME"
log "リポジトリ名: $REPO_NAME"
log "プロジェクトディレクトリ: $(pwd)"
log "総サイズ: $(du -sh --exclude=node_modules . 2>/dev/null | cut -f1)"
echo ""

# Step 1: プロジェクトルート用.gitignore作成
step "プロジェクトルート .gitignore 作成"

cat > .gitignore << 'EOF'
# ======================================
# ダンプトラッカーシステム .gitignore
# ======================================

# Node.js Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Package manager lock files (choose your strategy)
# package-lock.json  # Uncomment if using npm
# yarn.lock          # Uncomment if using yarn
# pnpm-lock.yaml     # Uncomment if using pnpm

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Build outputs
dist/
build/
out/
.next/
.nuxt/
.cache/
.parcel-cache/
.rpt2_cache_*/
.rts2_cache_*/
*.tsbuildinfo

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov
.nyc_output

# Instrumented libs generated by jscoverage/JSCover
lib-cov

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# IDEs and editors
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.swp
*.swo
*~
.idea/
*.sublime-workspace
*.sublime-project

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Desktop.ini
$RECYCLE.BIN/

# Database files
*.sqlite
*.sqlite3
*.db

# Upload directories
uploads/
upload/
backend/uploads/
frontend/public/uploads/

# Backup files
*.backup
*.bak
*.tmp
*~

# Log directories
logs/
backend/logs/

# Docker
.dockerignore
*.tar

# SSL certificates
*.pem
*.key
*.crt
*.cert

# Test coverage
coverage/
.coverage
htmlcov/

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# ======================================
# プロジェクト固有
# ======================================

# Development files
TODO.md
NOTES.md
SCRATCH.md
scratch/
playground/

# Personal configurations
.personal/
personal/

# Test data
test-data/
mock-data/

# Archive files
*.zip
*.tar.gz
*.rar

# Documentation builds
docs/build/
docs/dist/

# Setup and deployment logs
setup_*.log
deploy_*.log
install_*.log

# Monitoring and performance
.benchmarks/
performance/

# Database backups (large files)
database/backups/*.sql
*.dump

# Prisma
prisma/migrations/**/migration.sql

# PM2
.pm2/
ecosystem.config.js

# MacOS
**/.DS_Store

# Windows
**/Thumbs.db
**/Desktop.ini

# Linux
**/*~
EOF

success ".gitignore作成完了"

# Step 2: プロジェクトルートREADME.md作成
step "プロジェクトルート README.md 作成"

cat > README.md << 'EOF'
# 🚛 ダンプ運行記録日報システム (Dump Tracker System)

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Node.js Version](https://img.shields.io/badge/node-%3E%3D20.0.0-brightgreen.svg)](https://nodejs.org/)
[![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-blue.svg)](https://www.typescriptlang.org/)

## 📋 プロジェクト概要

ダンプ運転手の日報をアプリ化してペーパーレス化を実現し、運行データを一元管理するシステムです。GPS追跡、リアルタイム監視、自動レポート生成機能を提供します。

### 🎯 主な目的
- 紙の日報廃止による事務処理時間削減
- 正確なデータ蓄積による輸送実績報告の効率化  
- GPS位置情報によるリアルタイム運行管理
- 自動マスタ登録による入力負担軽減
- データ一元管理による業務効率化

## ✨ 主な機能

### 🚛 運転手向けモバイルアプリ
- ✅ ユーザー認証・ログイン
- ✅ 車両情報入力・管理
- ✅ 乗車前・乗車後点検記録
- ✅ リアルタイムGPS追跡
- ✅ 積込・積降場所記録
- ✅ 給油記録・燃費管理
- ✅ 運行履歴確認・検索
- ✅ オフライン対応・自動同期

### 💼 管理者向けCMS
- ✅ ユーザー・権限管理
- ✅ 車両マスタ管理
- ✅ 運行記録・データ管理
- ✅ リアルタイムGPSモニタリング
- ✅ 日報・実績報告書出力
- ✅ 各種マスタデータ管理
- ✅ 統計・分析ダッシュボード

## 🏗️ 技術スタック

### フロントエンド
- **Framework:** React 18+ with TypeScript
- **Build Tool:** Vite
- **Styling:** Tailwind CSS
- **State Management:** Zustand
- **HTTP Client:** Axios
- **Maps:** Leaflet + React-Leaflet
- **Testing:** Vitest + Playwright
- **PWA:** Service Worker対応

### バックエンド
- **Runtime:** Node.js 20+
- **Framework:** Express.js with TypeScript
- **Database:** PostgreSQL (PostGIS拡張)
- **Cache:** Redis
- **ORM:** Prisma
- **Authentication:** JWT + bcryptjs
- **Validation:** Joi/Zod
- **File Upload:** Multer + Sharp
- **Real-time:** Socket.io
- **Logging:** Winston
- **Testing:** Jest + Supertest

### インフラ・DevOps
- **Containerization:** Docker + Docker Compose
- **Cloud:** AWS/GCP対応
- **Web Server:** Nginx
- **Database Extensions:** PostGIS (地理空間データ)
- **Process Management:** PM2
- **Monitoring:** システムログ + パフォーマンス監視

## 📁 プロジェクト構成

```
dump-tracker-system/
├── frontend/                  # Reactフロントエンド
│   ├── src/
│   │   ├── components/        # UIコンポーネント
│   │   │   ├── common/        # 共通コンポーネント
│   │   │   ├── forms/         # フォームコンポーネント
│   │   │   ├── layout/        # レイアウトコンポーネント
│   │   │   ├── maps/          # 地図コンポーネント
│   │   │   └── ui/            # UIプリミティブ
│   │   ├── pages/             # ページコンポーネント
│   │   │   ├── auth/          # 認証関連
│   │   │   ├── dashboard/     # ダッシュボード
│   │   │   ├── reports/       # レポート
│   │   │   ├── routes/        # 運行記録
│   │   │   ├── settings/      # 設定
│   │   │   └── trucks/        # 車両管理
│   │   ├── hooks/             # カスタムフック
│   │   ├── services/          # APIサービス
│   │   ├── stores/            # 状態管理
│   │   ├── types/             # TypeScript型定義
│   │   └── utils/             # ユーティリティ関数
│   ├── public/                # 静的ファイル
│   ├── tests/                 # テストファイル
│   └── package.json
├── backend/                   # Express.jsバックエンド
│   ├── src/
│   │   ├── controllers/       # コントローラー
│   │   ├── middleware/        # ミドルウェア
│   │   ├── models/            # データモデル
│   │   ├── routes/            # APIルート
│   │   ├── services/          # ビジネスロジック
│   │   ├── types/             # TypeScript型定義
│   │   ├── utils/             # ユーティリティ
│   │   └── validators/        # バリデーター
│   ├── prisma/                # Prismaスキーマ
│   ├── tests/                 # テストファイル
│   ├── data/                  # データファイル
│   ├── logs/                  # ログファイル
│   └── package.json
├── database/                  # データベース関連
│   ├── migrations/            # マイグレーション
│   ├── seeds/                 # シードデータ
│   ├── schemas/               # スキーマ定義
│   ├── functions/             # ストアドファンクション
│   ├── triggers/              # トリガー
│   └── backups/               # バックアップ
├── docs/                      # ドキュメント
│   ├── api/                   # API仕様書
│   └── database/              # データベース設計
└── scripts/                   # 各種スクリプト
    ├── database/              # DB関連スクリプト
    ├── development/           # 開発用スクリプト
    └── testing/               # テスト用スクリプト
```

## 🚀 開発環境セットアップ

### 前提条件
- Node.js 20.0.0+
- npm 8.0.0+
- Docker & Docker Compose
- PostgreSQL 15+
- Redis 7+

### セットアップ手順

```bash
# 1. リポジトリクローン
git clone https://github.com/YOUR_USERNAME/dump-tracker-system.git
cd dump-tracker-system

# 2. 依存関係インストール
cd frontend && npm install
cd ../backend && npm install

# 3. 環境変数設定
cp backend/.env.example backend/.env
cp frontend/.env.example frontend/.env
# .envファイルを編集して各種設定を行う

# 4. Dockerを使用する場合（推奨）
cd backend
docker-compose up -d

# 5. データベースセットアップ
cd backend
npx prisma migrate dev
npx prisma db seed

# 6. 開発サーバー起動
# バックエンド（別ターミナル）
cd backend && npm run dev

# フロントエンド（別ターミナル）
cd frontend && npm run dev
```

### ローカル開発URL
- **フロントエンド:** http://localhost:3000
- **バックエンドAPI:** http://localhost:3001
- **API文書:** http://localhost:3001/api-docs

## 🧪 テスト

```bash
# フロントエンドテスト
cd frontend
npm run test              # 単体テスト
npm run test:e2e          # E2Eテスト

# バックエンドテスト
cd backend
npm run test              # 単体テスト
npm run test:integration  # 統合テスト
npm run test:e2e          # E2Eテスト
```

## 📊 開発状況

### Phase 1: 社内向け初期リリース (進行中)
- [x] 要件定義・仕様策定
- [x] UI/UX設計・プロトタイプ
- [x] プロジェクト基盤構築
- [x] 開発環境セットアップ
- [ ] 認証・認可システム
- [ ] 車両・ユーザー管理機能
- [ ] 運行記録・GPS追跡機能
- [ ] 日報・レポート機能
- [ ] モバイル最適化
- [ ] テスト・品質保証
- [ ] デプロイ・運用環境構築

### Phase 2: 外部提供・商用化 (計画中)
- [ ] マルチテナント対応
- [ ] ネイティブアプリ化
- [ ] 高度な分析機能
- [ ] API外部連携
- [ ] 商用展開・スケーリング

## 🏆 期待される効果

- ✅ **効率化**: 紙の日報廃止による事務処理時間70%削減
- ✅ **正確性**: 自動データ収集による入力ミス95%削減
- ✅ **可視化**: リアルタイム位置情報による運行状況把握
- ✅ **自動化**: マスタ自動登録による入力負担軽減
- ✅ **一元化**: データ統合による業務効率化

## 🔐 セキュリティ

- JWT認証によるセキュアなAPI通信
- HTTPS通信の強制
- 入力データバリデーション
- SQLインジェクション対策
- XSS攻撃対策
- CORS設定

## 📄 ライセンス

MIT License - 詳細は [LICENSE](LICENSE) ファイルを参照

## 👥 開発チーム

- **プロジェクトマネージャー:** [名前]
- **フロントエンド開発:** [名前]
- **バックエンド開発:** [名前]
- **UI/UX デザイン:** [名前]
- **DevOps:** [名前]

## 📞 サポート

- **Issues:** [GitHub Issues](https://github.com/YOUR_USERNAME/dump-tracker-system/issues)
- **Discussions:** [GitHub Discussions](https://github.com/YOUR_USERNAME/dump-tracker-system/discussions)
- **Email:** support@example.com

---

**🎯 リリース目標:** 2026年6月末（Phase1）

**📈 最終更新:** 2025年9月9日
EOF

success "README.md作成完了"

# Step 3: プロジェクト全体用package.json作成
step "プロジェクトルート package.json 作成"

cat > package.json << 'EOF'
{
  "name": "dump-tracker-system",
  "version": "1.0.0",
  "description": "ダンプ運行記録日報システム - Dump Truck Operation Daily Report System",
  "private": true,
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "cd backend && npm run test",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && npm run lint",
    "docker:up": "cd backend && docker-compose up -d",
    "docker:down": "cd backend && docker-compose down",
    "docker:build": "cd backend && docker-compose build",
    "db:migrate": "cd backend && npx prisma migrate dev",
    "db:seed": "cd backend && npx prisma db seed",
    "db:reset": "cd backend && npx prisma migrate reset --force",
    "setup": "npm install && cd frontend && npm install && cd ../backend && npm install",
    "clean": "rm -rf node_modules frontend/node_modules backend/node_modules",
    "start": "npm run docker:up && npm run dev"
  },
  "workspaces": [
    "frontend",
    "backend"
  ],
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/YOUR_USERNAME/dump-tracker-system.git"
  },
  "keywords": [
    "dump-truck",
    "gps-tracking",
    "fleet-management",
    "daily-report",
    "transportation",
    "logistics",
    "react",
    "nodejs",
    "typescript",
    "postgresql"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/YOUR_USERNAME/dump-tracker-system/issues"
  },
  "homepage": "https://github.com/YOUR_USERNAME/dump-tracker-system#readme"
}
EOF

success "package.json作成完了"

# Step 4: Git初期化
step "Git初期化"

if [ ! -d ".git" ]; then
    git init
    success "Gitリポジトリ初期化完了"
else
    warning "Gitリポジトリは既に存在します"
fi

# Git設定確認
if ! git config user.name &>/dev/null; then
    warning "Git user.nameが未設定です"
    read -p "あなたの名前を入力: " username
    git config --global user.name "$username"
fi

if ! git config user.email &>/dev/null; then
    warning "Git user.emailが未設定です"
    read -p "メールアドレスを入力: " email
    git config --global user.email "$email"
fi

# Step 5: ステージング・コミット
step "初回コミット作成"

git add .
log "ファイルをステージング中..."

# コミット時の情報収集
FRONTEND_VERSION=$(cat frontend/package.json | grep '"version"' | cut -d'"' -f4)
BACKEND_VERSION=$(cat backend/package.json | grep '"version"' | cut -d'"' -f4)
FILE_COUNT=$(git diff --cached --name-only | wc -l)

git commit -m "🚀 Initial commit: ダンプ運行記録日報システム

📋 プロジェクト概要:
- React + TypeScript フロントエンド (v$FRONTEND_VERSION)  
- Express.js + TypeScript バックエンド (v$BACKEND_VERSION)
- PostgreSQL + Redis データベース
- Docker環境完備
- 充実したプロジェクト構造

✨ 主要機能:
- GPS追跡・運行記録システム
- リアルタイム監視・分析
- 日報自動生成・ペーパーレス化
- モバイル対応PWA

🏗️ 技術スタック:
- Frontend: React 18+, Vite, Tailwind CSS, TypeScript
- Backend: Node.js 20+, Express.js, Prisma, TypeScript  
- Database: PostgreSQL (PostGIS), Redis
- Infrastructure: Docker, Nginx

📁 ファイル数: $FILE_COUNT
🎯 目標: Phase1 社内リリース (2026年6月)"

success "初回コミット完了"

# Step 6: リモートリポジトリ設定
step "GitHubリモートリポジトリ設定"

git remote add origin "https://github.com/$GITHUB_USERNAME/$REPO_NAME.git"
git branch -M main

success "リモートリポジトリ設定完了"

# 完了メッセージ
echo ""
echo "🎉 セットアップ完了！"
echo ""
echo "📊 プロジェクト統計:"
echo "   📁 ディレクトリ数: $(find . -type d | wc -l)"
echo "   📄 ファイル数: $(find . -type f -not -path "*/node_modules/*" | wc -l)"
echo "   💿 サイズ: $(du -sh --exclude=node_modules . | cut -f1)"
echo ""
echo "🔗 次のステップ:"
echo "1. GitHub (https://github.com/$GITHUB_USERNAME) でリポジトリ '$REPO_NAME' を作成"
echo "   - Repository name: $REPO_NAME"
echo "   - Description: ダンプ運行記録日報システム"
echo "   - Private推奨"
echo "   - README.mdは追加しない（既存使用）"
echo ""
echo "2. プッシュ実行:"
echo "   git push -u origin main"
echo ""
echo "3. 開発開始:"
echo "   npm run setup    # 依存関係インストール"
echo "   npm run start    # Docker環境起動＋開発サーバー"
echo ""

read -p "今すぐGitHubにプッシュしますか？ (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    step "GitHubプッシュ実行"
    if git push -u origin main; then
        success "🎉 GitHubプッシュ完了！"
        echo ""
        echo "🔗 GitHubリポジトリ: https://github.com/$GITHUB_USERNAME/$REPO_NAME"
        echo ""
        echo "🤖 Claude連携のために:"
        echo "   - リポジトリURLを会話で共有"
        echo "   - 重要なファイル変更時はGoogle Drive経由で内容共有"
        echo "   - 定期的にプロジェクト状況を報告"
        echo ""
        echo "⚡ 開発を開始:"
        echo "   npm run start"
    else
        error "プッシュに失敗しました"
        warning "GitHubでリポジトリが作成されているか確認してください"
    fi
fi